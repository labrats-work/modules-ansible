
- name: Check if Kubernetes is installed
  command: kubectl version --short
  become: no
  register: kubectl_result
  ignore_errors: true

- name: Install if kubectl version rc is zero
  when: kubectl_result.rc == 1
  block:

    - name: Create empty config file.
      become: yes
      ansible.builtin.copy:
        content: ""
        dest: /root/kubeadm_init.yaml
        owner: root
        group: root
        mode: '0600'

    - name: Create yaml configs.
      become: yes
      ansible.builtin.blockinfile:
        path: /root/kubeadm_init.yaml
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.kind }}"
        block: |
          {{ item | to_nice_yaml(sort_keys=false) }}
          {%- if not loop.last %}
          ---
          {% endif %}
      loop: "{{ yaml_configs }}"
      loop_control:
        extended: true

    - name: Restart container runtime
      ansible.builtin.service:
        name: containerd
        state: restarted 

    - name: Run kubectl init
      ansible.builtin.command: kubeadm init --config=/root/kubeadm_init.yaml --upload-certs

    - name: Wait until the file /etc/kubernetes/admin.conf is present before continuing
      ansible.builtin.wait_for:
        path: /etc/kubernetes/admin.conf

    - name: Wait for port 6443 to become open on the host, don't start checking for 10 seconds
      ansible.builtin.wait_for:
        port: 6443
        delay: 10
        host: localhost

    - name: Create .kube directory
      ansible.builtin.file:
        path: .kube
        state: directory
        owner: sysadmin
        group: sysadmin
        mode: '0700'

    - name: Copy admin.conf
      ansible.builtin.copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: .kube/config
        owner: sysadmin
        group: sysadmin
        mode: '0600'

- name: Get cluster_ca_data from master config file.
  ansible.builtin.shell: grep certificate-authority-data /etc/kubernetes/admin.conf | tr -d ' ' | cut -d ':' -f 2-
  register: grep_cluster_ca_data

- name: Get cluster_server from master config file.
  ansible.builtin.shell: grep server /etc/kubernetes/admin.conf | tr -d ' ' | cut -d ':' -f 2-
  register: grep_cluster_server

- name: Get kubeadm_token.
  ansible.builtin.shell: kubeadm token create
  register: kubeadm_token

- name: Set facts for join data.
  ansible.builtin.set_fact: 
    discovery:
      ca_data: "{{ grep_cluster_ca_data.stdout }}"
      server: "{{ grep_cluster_server.stdout }}"
      tlsBootstrapToken: "{{ kubeadm_token.stdout }}"